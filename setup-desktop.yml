---
- hosts: localhost
  become: true
  tasks:
    - name: Ensure the system is up-to-date
      pacman:
        update_cache: yes
        upgrade: yes

    - name: Update AUR packages
      shell: yay -Syu --noconfirm

    - name: Install common desktop packages
      pacman:
        name:
          - neovim
        state: present

    - name: Check if the root partition is encrypted
      shell: lsblk -o NAME,TYPE,FSTYPE | grep crypt | grep root
      register: encryption_status
      ignore_errors: true

    - name: Display encryption status
      debug:
        msg: "Encryption status: {{ encryption_status.stdout }}"

    - name: Mark system as encrypted if 'crypt' is found
      set_fact:
        disk_encrypted: true
      when: encryption_status.stdout != ""

    - name: Fail the task if the disk is not encrypted
      fail:
        msg: "Disk encryption is not enabled on this system!"
      when: encryption_status.stdout == ""

    - name: Report compliance status to central server
      uri:
        url: "http://localhost:5000/api/report"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body: >
          {
            "hostname": "{{ ansible_hostname }}",
            "compliance_status": "Compliant",
            "timestamp": "{{ ansible_date_time.iso8601 }}",
            "details": "{{ encryption_status.stdout }}"
          }
        status_code: 200
      when: encryption_status.stdout != ""
      ignore_errors: yes

    - name: Report non-compliance status to central server
      uri:
        url: "http://localhost:5000/api/report"
        method: POST
        headers:
          Content-Type: "application/json"
        body_format: json
        body: >
          {
            "hostname": "{{ ansible_hostname }}",
            "compliance_status": "Non-compliant",
            "timestamp": "{{ ansible_date_time.iso8601 }}",
            "details": "Disk encryption is not enabled."
          }
        status_code: 200
      when: encryption_status.stdout == ""
      ignore_errors: yes
